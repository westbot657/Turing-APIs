// Hi, indentation in this file is very important in making life easier (simpler parsing)
// please don't modify the indentation (and only 4-space increments allowed)

#struct-defs


class Color {
    ptr: i32

    #macro $1
    #pattern # r # g # b # a
    #macro apply
    fn get_$1(&self) -> f32 #mdef.pass_ptr_attr_ref(self)
    fn set_$1(&self, $1: f32) -> void #mdef.pass_ptr_ref_ret_attr(self, $1)
    #macro end

    fn set_rgb(&self, r: f32, g: f32, b: f32) -> void #mdef.call_self_attr_3_ref(ptr, r, g, b)
    fn set_rgba(&self, r: f32, g: f32, b: f32, a: f32) -> void #mdef.call_self_attr_4_ref(ptr, r, g, b, a)


}

#macro $1
#pattern # ColorNote # BombNote # Arc # Wall # ChainHeadNote # ChainLinkNote # ChainNote
#macro apply
class $1 {
    ptr: i32

    #macro $2 $3
    #pattern # color Color # position Vec3 # orientation Quat
    #macro apply
    fn get_$2(&self) -> $3 #mdef.getter($3)
    fn set_$2(&self, $2: $3) -> void #mdef.call_self_attr_1_ref(ptr, $2.ptr)
    #macro end

}
#macro end

class Log {

    static fn info(msg: str) -> void #mdef.log(info)
    static fn warn(msg: str) -> void #mdef.log(warn)
    static fn critical(msg: str) -> void #mdef.log(error)
    static fn debug(msg: str) -> void #mdef.log(debug)

}

class Beatmap {

    #macro $1 $2
    #pattern # color_note ColorNote # bomb_note BombNote # arc Arc # wall Wall # chain_head_note ChainHeadNote # chain_link_note ChainLinkNote # chain_note ChainNote
    #macro apply

    static fn add_$1($1: $2) -> void #mdef.pass_ptr_attr_owned($1)
    static fn remove_$1($1: $2) -> void #mdef.pass_ptr_attr_owned($1)

    static fn get_$1_at_beat(beat: f32) -> $2 #mdef.static_pass_1(beat)

    #macro end

}

class Vec2 {
    ptr: i32

    static fn from_xy(x: f32, y: f32) -> Vec2 #mdef.static_pass_2_ret_struct(x, y, Vec2)

    #macro $1
    #pattern # x # y
    #macro apply
    fn get_$1(&self) -> f32 #mdef.pass_ptr_attr_ref(self)
    fn set_$1(&self, $1) -> f32 #mdef.pass_ptr_ref_ret_attr(self, $1)
    #macro end

}

class Vec3 {
    ptr: i32

    static fn from_xyz(x: f32, y: f32, z: f32) -> Vec3 #mdef.static_pass_3_ret_struct(x, y, z, Vec3)

    #macro $1
    #pattern # x # y # z
    #macro apply
    fn get_$1(&self) -> f32 #mdef.pass_ptr_attr_ref(self)
    fn set_$1(&self, $1) -> f32 #mdef.pass_ptr_ref_ret_attr(self, $1)
    #macro end

}

class Vec4 {
    ptr: i32

    static fn from_xyzw(x: f32, y: f32, z: f32, w: f32) -> Vec4 #mdef.static_pass_4_ret_struct(x, y, z, w, Vec4)

    #macro $1
    #pattern # x # y # z # w
    #macro apply
    fn get_$1(&self) -> f32 #mdef.pass_ptr_attr_ref(self)
    fn set_$1(&self, $1) -> f32 #mdef.pass_ptr_ref_ret_attr(self, $1)
    #macro end

}

class Quat {
    ptr: i32

    static fn from_xyzw(x: f32, y: f32, z: f32, w: f32) -> Quat #mdef.static_pass_4_ret_struct(x, y, z, w, Quat)

    #macro $1
    #pattern # x # y # z # w
    #macro apply
    fn get_$1(&self) -> f32 #mdef.pass_ptr_attr_ref(self)
    fn set_$1(&self, $1) -> f32 #mdef.pass_ptr_ref_ret_attr(self, $1)
    #macro end

}

///////////////////////////////////////////////////////////////////////////////////////////
//  ┌─────┐╥╥╥┌─────┐╥╥┌──────┐╥╖┌───────┐╖     ╓┌──────┐╓╥┌───────┐╥┌───────┐╥╥┌─────┐  //
// ┌┘ ┌─┐ └┐╥┌┘ ┌─┐ └┐╥│ ┌──┐ └┐╥│ ┌─────┘╜     ║│ ┌──┐ └┐║│ ┌─────┘║│ ┌─────┘╥┌┘ ┌───┘  //
// │ ┌┘╜└──┘╨│ ┌┘╜└┐ │║│ │║║└┐ │║│ └──┐╖        ║│ │ ╙└┐ │║│ └──┐ ║║║│ └──┐╙╨╨╨└┐ └───┐  //
// │ └┐╖┌──┐╥│ └┐╖┌┘ │║│ │║║┌┘ │║│ ┌──┘╜        ║│ │ ╓┌┘ │║│ ┌──┘ ║║║│ ┌──┘ ╙╨╨╨└───┐ └┐ //
// └┐ └─┘ ┌┘╨└┐ └─┘ ┌┘╨│ └──┘ ┌┘╨│ └─────┐╖     ║│ └──┘ ┌┘║│ └─────┐║│ │    ╓╥╥╥┌───┘ ┌┘ //
//  └─────┘╨╨╨└─────┘╨╨└──────┘╨╜└───────┘╜     ╙└──────┘╙╨└───────┘╨└─┘    ╙╨╨╨└─────┘  //
///////////////////////////////////////////////////////////////////////////////////////////
#code-defs

#pass_ptr_attr_owned($1) {
    #C, #C++, #zig, #ts {
        ~($1.ptr);
    }
    #lua {
        ~($1.ptr)
    }
}




#static_pass_1($1) {
    #C, #C++, #zig, #ts {
        ~($1);
    }
    #lua {
        ~($1)
    }
}
#static_pass_2($1, $2) {
    #C, #C++, #zig, #ts {
        ~($1, $2);
    }
    #lua {
        ~($1, $2)
    }
}
#static_pass_3($1, $2, $3) {
    #C, #C++, #zig, #ts {
        ~($1, $2, $3);
    }
    #lua {
        ~($1, $2, $3)
    }
}
#static_pass_4($1, $2, $3, $4) {
    #C, #C++, #zig, #ts {
        ~($1, $2, $3, $4);
    }
    #lua {
        ~($1, $2, $3, $4)
    }
}



#static_pass_1_ret_struct($1, $type) {
    #C {
        $type inst;
        inst.ptr = ~($1);
        return inst;
    }
    #C++ {
        $type inst = $type {};
        inst.ptr = ~($1);
        return inst;
    }
    #zig {
        return .{ .ptr = ~($1) };
    }
    #lua {
        local ptr: int32 = ~($1)
        local inst: $type = { ptr = ptr }
        return inst
    }
    #ts {
        return new $type(~($1));
    }
}
#static_pass_2_ret_struct($1, $2, $type) {
    #C {
        $type inst;
        inst.ptr = ~($1, $2);
        return inst;
    }
    #C++ {
        $type inst = $type {};
        inst.ptr = ~($1, $2);
        return inst;
    }
    #zig {
        return .{ .ptr = ~($1, $2) };
    }
    #lua {
        local ptr: int32 = ~($1, $2)
        local inst: $type = { ptr = ptr }
        return inst
    }
    #ts {
        return new $type(~($1, $2));
    }
}
#static_pass_3_ret_struct($1, $2, $3, $type) {
    #C {
        $type inst;
        inst.ptr = ~($1, $2, $3);
        return inst;
    }
    #C++ {
        $type inst = $type {};
        inst.ptr = ~($1, $2, $3);
        return inst;
    }
    #zig {
        return .{ .ptr = ~($1, $2, $3) };
    }
    #lua {
        local ptr: int32 = ~($1, $2, $3)
        local inst: $type = { ptr = ptr }
        return inst
    }
    #ts {
        return new $type(~($1, $2, $3));
    }
}
#static_pass_4_ret_struct($1, $2, $3, $4, $type) {
    #C {
        $type inst;
        inst.ptr = ~($1, $2, $3, $4);
        return inst;
    }
    #C++ {
        $type inst = $type {};
        inst.ptr = ~($1, $2, $3, $4);
        return inst;
    }
    #zig {
        return .{ .ptr = ~($1, $2, $3, $4) };
    }
    #lua {
        local ptr: int32 = ~($1, $2, $3, $4)
        local inst: $type = { ptr = ptr }
        return inst
    }
    #ts {
        return new $type(~($1, $2, $3, $4));
    }
}



#pass_ptr_attr_ref($1) {
    #zig {
        return ~($1.ptr);
    }
    #ts {
        return ~(this.ptr);
    }
    #C {
        return ~($1->ptr);
    }
    #C++ {
        return ~(this->ptr);
    }
    #lua {
        return ~($1.ptr)
    }
}

#pass_ptr_ref_ret_attr($1, $2) {
    #zig {
        ~($1.ptr, $2);
    }
    #ts {
        ~(this.ptr, $2);
    }
    #C {
        ~($1->ptr, $2);
    }
    #C++ {
        ~(this->ptr, $2);
    }
    #lua {
        ~($1.ptr, $2)
    }
}

#str_to_ptr {
    #C, #lua {
        ~(msg)
    }
    #C++ {
        ~(msg.c_str())
    }
    #zig {
        ~(@ptrCast([*]const u8, msg.ptr))
    }
    #ts {
        ~(changetype<usize>(String.UTF8.encode(msg)))
    }
}

#log($1) {
    #C, #C++ {
        char* s = concat_strings("$1: ", msg);
        _log(s);
        free(s);
    }
    #lua {
        _log(string.format("$1: %s", msg))
    }
    #zig {
        var gpa = std.heap.GeneralPurposeAllocator(.{}){};
        const allocator = gpa.allocator();
        const s = try concat_strings(allocator, "$1: ", msg);
        defer allocator.free(s);
        _log(@ptrCast(msg.ptr));
    }
    #ts {
        _log(<i32>changetype<usize>(String.UTF8.encode("$1: " + msg)));
    }
}

#constructor_beat($1) {
    #C {
        $1 inst;
        inst.ptr = ~(beat);
        return inst;
    }
    #C++ {
        $1 inst = $1 {};
        inst.ptr = ~(beat);
        return inst;
    }
    #zig {
        return .{ .ptr = ~(beat) };
    }
    #lua {
        local ptr: int32 = ~(beat)
        local note: $1 = { ptr = ptr }
        return note
    }
    #ts {
        let ptr = ~(beat);
        return new $1(ptr);
    }
}

#getter($type) {
    #C {
        $type inst;
        inst.ptr = ~(self->ptr);
        return inst;
    }
    #C++ {
        $type inst = $type {};
        inst.ptr = ~(this->ptr);
        return inst;
    }
    #zig {
        return .{ .ptr = ~(self.ptr) };
    }
    #lua {
        local ptr: int32 = ~(self.ptr)
        local inst: $type = { ptr = ptr }
        return inst
    }
    #ts {
        let ptr = ~(this.ptr);
        return new $type(ptr);
    }
}





#call_self_attr_1_ref($attr, $1) {
    #zig {
        ~(self.$attr, $1);
    }
    #ts {
        ~(this.$attr, $1);
    }
    #lua {
        ~(self.$attr, $1)
    }
    #C {
        ~(self->$attr, $1);
    }
    #C++ {
        ~(this->$attr, $1);
    }
}
#call_self_attr_2_ref($attr, $1, $2) {
    #zig {
        ~(self.$attr, $1, $2);
    }
    #ts {
        ~(this.$attr, $1, $2);
    }
    #lua {
        ~(self.$attr, $1, $2)
    }
    #C {
        ~(self->$attr, $1, $2);
    }
    #C++ {
        ~(this->$attr, $1, $2);
    }
}
#call_self_attr_3_ref($attr, $1, $2, $3) {
    #zig {
        ~(self.$attr, $1, $2, $3);
    }
    #ts {
        ~(this.$attr, $1, $2, $3);
    }
    #lua {
        ~(self.$attr, $1, $2, $3)
    }
    #C {
        ~(self->$attr, $1, $2, $3);
    }
    #C++ {
        ~(this->$attr, $1, $2, $3);
    }
}
#call_self_attr_4_ref($attr, $1, $2, $3, $4) {
    #zig {
        ~(self.$attr, $1, $2, $3, $4);
    }
    #ts {
        ~(this.$attr, $1, $2, $3, $4);
    }
    #lua {
        ~(self.$attr, $1, $2, $3, $4)
    }
    #C {
        ~(self->$attr, $1, $2, $3, $4);
    }
    #C++ {
        ~(this->$attr, $1, $2, $3, $4);
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  ┌─────┐╥╥┌───────┐╥╥┌─────┐╥╥┌───────┐╥┌───────┐╖ ┌─────┐      ╓╥┌──────┐╥╥┌───────┐╥┌───────┐╥╥┌─────┐  //
// ┌┘ ┌───┘╨╨└──┐ ┌──┘╨┌┘ ┌─┐ └┐╥└──┐ ┌──┘╨└──┐ ┌──┘╜┌┘ ┌─┐ └┐     ║║│ ┌──┐ └┐║│ ┌─────┘║│ ┌─────┘╥┌┘ ┌───┘  //
// └┐ └───┐╥╥╥╥╖│ │║║║║│ ┌┘╜└┐ │║║║ │ │║║     │ │║   │ ┌┘ └──┘     ║║│ │╙╨└┐ │║│ └──┐║║║║│ └──┐╨╨╨╨└┐ └───┐  //
//  └───┐ └┐╥╥╥╥│ │║║║║│ └───┘ │║║║ │ │║║     │ │║   │ └┐ ┌──┐     ║║│ │╓╥┌┘ │║│ ┌──┘║║║║│ ┌──┘╙╨╨╨╨└───┐ └┐ //
//  ┌───┘ ┌┘╨╨╨╨│ │║║║║│ ┌───┐ │║║║ │ │║║  ┌──┘ └──┐╖└┐ └─┘ ┌┘     ║║│ └──┘ ┌┘║│ └─────┐║│ │   ╓╥╥╥╥┌───┘ ┌┘ //
//  └─────┘╨╨╨╨╜└─┘╨╨╨╜└─┘╨╨╜└─┘╨╨╜ └─┘╨╜  └───────┘╜ └─────┘      ╙╨└──────┘╨╨└───────┘╨└─┘   ╙╨╨╨╨└─────┘  //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
#static-defs

#C {

    char* concat_strings(const char* str1, const char* str2) {
        int len1 = strlen(str1);
        int len2 = strlen(str2);
        char* result = malloc(len1 + len2 + 1); // +1 for null terminator
        
        if (result) {
            strcpy(result, str1);
            strcat(result, str2);
        }
        
        return result;
    }

}

#C++ {
    char* concat_strings(const char* str1, const char* str2) {
        int len1 = strlen(str1);
        int len2 = strlen(str2);
        char* result = (char*) malloc(len1 + len2 + 1); // +1 for null terminator
        
        if (result) {
            strcpy(result, str1);
            strcat(result, str2);
        }
        
        return result;
    }
}

#zig {

    pub fn concat_strings(allocator: std.mem.Allocator, str1: []const u8, str2: []const u8) ![]u8 {
        const new_len = str1.len + str2.len;
        const result = try allocator.alloc(u8, new_len);
        std.mem.copy(u8, result[0..str1.len], str1);
        std.mem.copy(u8, result[str1.len..], str2);
        return result;
    }

}

#ts {

    export function toCString(str: string): u32 {
        return <u32>changetype<usize>(String.UTF8.encode(str, true));
    }

    export function readCString(ptr: u32): string {
        const str = String.UTF8.decodeUnsafe(ptr, u32.MAX_VALUE, true); // true = null-terminated
        return str;
    }

}

#lua {

}


